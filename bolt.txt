üîπ Prompt Bolt.new ‚Äì Terminer le projet

Contexte :
Projet Next.js 13 (App Router) + TypeScript + TailwindCSS + Supabase.
D√©j√† commenc√© avec login, register, dashboard de base, comptes test client/merchant.
Le projet doit √™tre fonctionnel, SPA, moderne et inspir√© de Vercel Store.

1Ô∏è‚É£ Dashboard (/app/dashboard)

layout.tsx : Sidebar + Header + ThemeProvider (dark/light mode).

page.tsx : Statistiques rapides et actions (quick actions).

Support SPA complet (pas de reload complet pour chaque action).

2Ô∏è‚É£ Produits (/app/dashboard/products)

page.tsx :

Liste tous les produits (client/merchant).

Support filtrage, pagination.

Actions temps r√©el : ajouter au panier, ajouter aux favoris, √©diter/supprimer pour merchant.

Utilise ProductCard.

add/page.tsx : Formulaire cr√©ation produit (merchant) connect√© √† Supabase.

edit/[id]/page.tsx : Formulaire √©dition produit (merchant) connect√© √† Supabase.

3Ô∏è‚É£ Panier (/app/dashboard/cart/page.tsx)

Liste les produits du panier du client.

Utilise ProductCard ou mini-card sp√©cifique panier.

Calcul du total en temps r√©el.

Bouton checkout ‚Üí cr√©er commande dans Supabase.

4Ô∏è‚É£ Favoris (/app/dashboard/favorites/page.tsx)

Liste les produits favoris du client.

Actions : retirer du favori, ajouter au panier.

5Ô∏è‚É£ Commandes (/app/dashboard/orders/page.tsx)

Affiche historique commandes client.

Pour merchant : affichage et gestion des commandes.

Int√©grer SPA : ouvrir commandes individuelles sans reload complet.

Utiliser OrderList et composants associ√©s.

6Ô∏è‚É£ Messagerie (/app/dashboard/messages/page.tsx)

Liste des threads (autres utilisateurs avec qui on a des messages).

Cliquer ‚Üí ouvrir MessageThread dynamiquement (SPA).

Envoyer messages temps r√©el via Supabase Realtime.

7Ô∏è‚É£ Param√®tres / Profil (/app/dashboard/settings/page.tsx)

Affiche AvatarUploader.

Modifier info profil, mot de passe, th√®me (dark/light).

Sauvegarde c√¥t√© Supabase en temps r√©el.

8Ô∏è‚É£ Composants manquants / √† finaliser

ProductCard.tsx ‚Üí bouton panier + favoris + pour merchant : edit/delete.

OrderList.tsx ‚Üí liste commandes, actions selon r√¥le.

MessageThread.tsx ‚Üí fil messages + input temps r√©el.

AvatarUploader.tsx ‚Üí upload vers Supabase Storage.

ThemeProvider.tsx ‚Üí correction localStorage c√¥t√© serveur.

VoiceAssistant.tsx ‚Üí bouton micro et placeholder fonction.

9Ô∏è‚É£ Hooks / lib

useAuth.ts ‚Üí login/register + r√¥le + redirection SPA.

supabaseClient.ts ‚Üí connecter Supabase (URL + KEY).

api.ts ‚Üí fonctions utilitaires (cart, favorites, orders).

üîü Tests et comptes

Cr√©er comptes test :

Client : client@test.com / testclient123

Merchant : merchant@test.com / testmerchant123

Boutons login test sur login/register.

1Ô∏è‚É£1Ô∏è‚É£ Styles / UX

TailwindCSS, dark/light mode, responsive.

Notifications toast pour succ√®s / erreurs.

SPA partout : aucun reload complet apr√®s actions.

‚ö° Instructions finales

Chaque page et composant doit √™tre fonctionnel, complet et testable imm√©diatement.

Respecter structure de fichier d√©j√† d√©finie.

Utiliser React Hooks et Supabase en temps r√©el.

Gestion des r√¥les et permissions.

Corriger toutes erreurs localStorage, Realtime, import dynamique.

Sortie attendue :
Un projet Next.js + Supabase pr√™t √† d√©ployer, toutes pages et fonctionnalit√©s compl√®tes.
